<!-- In views/visualize.ejs -->
<!DOCTYPE html>
<html>
<head>
    <title>Visualize User Details</title>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.4/dist/jquery.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
<style>
.background-radial-gradient {
    background-color: hsl(218, 41%, 15%);
    background-image: radial-gradient(650px circle at 0% 0%,
        hsl(218, 41%, 35%) 15%,
        hsl(218, 41%, 30%) 35%,
        hsl(218, 41%, 20%) 75%,
        hsl(218, 41%, 19%) 80%,
        transparent 100%),
    radial-gradient(1250px circle at 100% 100%,
        hsl(218, 41%, 45%) 15%,
        hsl(218, 41%, 30%) 35%,
        hsl(218, 41%, 20%) 75%,
        hsl(218, 41%, 19%) 80%,
        transparent 100%);
}

#radius-shape-1 {
    height: 220px;
    width: 220px;
    top: -60px;
    left: -130px;
    background: radial-gradient(#44006b, #ad1fff);
    overflow: hidden;
}

#radius-shape-2 {
    border-radius: 38% 62% 63% 37% / 70% 33% 67% 30%;
    bottom: -60px;
    right: -110px;
    width: 300px;
    height: 300px;
    background: radial-gradient(#44006b, #ad1fff);
    overflow: hidden;
}

.bg-glass {
    background-color: hsla(0, 0%, 100%, 0.9) !important;
    backdrop-filter: saturate(200%) blur(25px);
    overflow: hidden;
}


/* Navbar Design */
#mainNavigation a {
    font-family: 'Cabin', sans-serif;
    font-size: 14px;
    text-transform: uppercase;
    letter-spacing: 2px;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.4)
}

.dropdown-menu {
    background: #03727d
}

a.dropdown-toggle {
    color: #dfdfdf !important
}

a.dropdown-item:hover {
    color: #03727d !important
}

.nav-item a {
    color: #dfdfdf;
}

.nav-item a:hover {
    color: #fff
}

.nav-item {
    min-width: 12vw;
}

#mainNavigation {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: 123;
    padding-bottom: 120px;
    /* Permalink - use to edit and share this gradient: https://colorzilla.com/gradient-editor/#000000+0,000000+100&0.65+0,0+100;Neutral+Density */
    background: -moz-linear-gradient(top, rgba(0, 0, 0, 0.65) 0%, rgba(0, 0, 0, 0) 100%);
    /* FF3.6-15 */
    background: -webkit-linear-gradient(top, rgba(0, 0, 0, 0.65) 0%, rgba(0, 0, 0, 0) 100%);
    /* Chrome10-25,Safari5.1-6 */
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.65) 0%, rgba(0, 0, 0, 0) 100%);
    /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#a6000000', endColorstr='#00000000', GradientType=0);
    /* IE6-9 */
}

#navbarNavDropdown.collapsing .navbar-nav,
#navbarNavDropdown.show .navbar-nav {
    background: #037582;
    padding: 12px;
}
</style>
</head>
<body>
    <div id="mainNavigation">
        <div class="navbar-expand-md">
            <div class="navbar-dark text-center my-2">
                <button class="navbar-toggler w-75" type="button" data-bs-toggle="collapse"
                    data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false"
                    aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span> <span class="align-middle">Menu</span>
                </button>
            </div>
            <div class="text-center mt-3 collapse navbar-collapse" id="navbarNavDropdown">
                <ul class="navbar-nav mx-auto ">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Landing Page</a>
                    </li>


                    <li class="nav-item">
                        <a class="nav-link" href="/profile">Profile</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/user-details/">User Detail</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/logout">Logout</a>
                    </li>
                    
                  
                </ul>
            </div>
        </div>
    </div>
    <div class="jumbotron p-3 p-md-5 text-white rounded bg-dark">
        <div class="col-md-6 px-0">
          <h1 class="display-4 font-italic">Visualization</h1>
          <p class="lead my-3" style="line-height: 25px;">We have compiled data from our extensive database to provide you with a visual representation of various demographics. These charts cover essential categories such as gender, civil status, region, city, and country.</p>
          <p class="lead mb-0"></p>

          <div class="col-md-4 col-sm-4 col-xs-6">
            <a href="http://localhost:5173/" target="_blank" class="btn btn-primary btn-block btn-lg">Business</a>
            <a href="/highcharts" target="_blank" class="btn btn-primary btn-block btn-lg">HighCharts</a>

          </div>
        </div>
      </div>

      

      <div class="container-fluid">
        <div class="row justify-content-center">
            <div class="col-md-4">
                <canvas id="cityChart"></canvas>
            </div>
            <div class="col-md-4">
                <canvas id="regionChart"></canvas>
            </div>
            <div class="col-md-4">
                <canvas id="countryChart"></canvas>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-6">
                <canvas id="genderChart"></canvas>
                <div id="container"></div>
            </div>
            <div class="col-md-6">
                <canvas id="civilStatusChart"></canvas>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-6">
                <canvas id="hobbiesChart"></canvas>
            </div>
        </div>
    </div>



    <script src="https://code.highcharts.com/highcharts.js"></script>

    <script>
        const cityCounts = <%- JSON.stringify(cityCounts) %>;
        const regionCounts = <%- JSON.stringify(regionCounts) %>;
        const countryCounts = <%- JSON.stringify(countryCounts) %>;
        const genderCounts = <%- JSON.stringify(genderCounts) %>;
        const civilStatusCounts = <%- JSON.stringify(civilStatusCounts) %>;

        let totalRecords = Object.values(cityCounts).reduce((a, b) => a + b, 0);

        new Chart(document.getElementById('cityChart'), {
            type: 'bar',
            data: {
                labels: Object.keys(cityCounts),
                datasets: [{
                    label: 'Cities',
                    data: Object.values(cityCounts),
                    backgroundColor: 'rgba(40, 50, 132, 0.7)', // Add transparency to the background color
                    borderColor: 'rgba(40, 50, 132, 1)', // Add a solid color for the border
                    borderWidth: 2,
                }],
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        max: totalRecords,
                        ticks: {
                            callback: function(value, index, values) {
                                if (Math.floor(value) === value) {
                                    return value;
                                }
                            }
                        }
                    }
                }
            }
        });
        

        new Chart(document.getElementById('regionChart'), {
            type: 'bar',
            data: {
                labels: Object.keys(regionCounts),
                datasets: [{
                    label: 'Region',
                    data: Object.values(regionCounts),
                    backgroundColor: 'rgba(255, 99, 132, 0.7)', // Add transparency to the background color
                    borderColor: 'rgba(255, 99, 132, 1)', // Add a solid color for the border
                }],
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        max: totalRecords,
                        ticks: {
                            callback: function(value, index, values) {
                                if (Math.floor(value) === value) {
                                    return value;
                                }
                            }
                        }
                    }
                }
            }
        });


        new Chart(document.getElementById('countryChart'), {
            type: 'bar',
            data: {
                labels: Object.keys(countryCounts),
                datasets: [{
                    label: 'Countries',
                    data: Object.values(countryCounts),
                    backgroundColor: 'rgba(90, 200, 132, 0.7)', // Add transparency to the background color
                    borderColor: 'rgba(90, 200, 132, 1)',
                }],
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        max: totalRecords,
                        ticks: {
                            callback: function(value, index, values) {
                                if (Math.floor(value) === value) {
                                    return value;
                                }
                            }
                        }
                    }
                }
            }
        });

        new Chart(document.getElementById('genderChart'), {
            type: 'pie',
            data: {
                labels: Object.keys(genderCounts),
                datasets: [{
                    data: Object.values(genderCounts),
                    backgroundColor: [
                        createRadialGradient('red', 'orange'),
                        createRadialGradient('blue', 'lightblue'),
                        createRadialGradient('green', 'lightgreen'),
                        createRadialGradient('yellow', 'lightyellow')
                    ],
                    borderWidth: 1, // Add border around each segment
                    borderColor: 'white', // Set the border color
                }],
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: true, // Show the legend
                        position: 'right',
                        labels: {
                            font: {
                                size: 14, // Adjust the legend font size
                            },
                        },
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.parsed || 0;
                                return label + ': ' + value;
                            },
                        },
                    },
                },
            },
        });

        function createRadialGradient(startColor, endColor) {
            const ctx = document.createElement('canvas').getContext('2d');
            const gradient = ctx.createRadialGradient(50, 50, 0, 50, 50, 50);
            gradient.addColorStop(0, startColor);
            gradient.addColorStop(1, endColor);
            return gradient;
        }

        new Chart(document.getElementById('civilStatusChart'), {
            type: 'polarArea',
            data: {
                labels: Object.keys(civilStatusCounts),
                datasets: [{
                    label: 'Civil Status',
                    data: Object.values(civilStatusCounts),
                    borderWidth: 0, // Remove border around segments
                    backgroundColor: [
                        createRadialGradient('red', 'orange'),
                        createRadialGradient('blue', 'lightblue'),
                        createRadialGradient('green', 'lightgreen'),
                        createRadialGradient('yellow', 'lightyellow')
                    ], // Add more colors if needed
                }],
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: true,
                        position: 'right',
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return context.parsed + ' (' + context.label + ')';
                            },
                        },
                    },
                },
                scales: {
                    r: {
                        beginAtZero: true,
                        suggestedMin: 0, // Ensure the scale starts at 0
                        ticks: {
                            stepSize: 5, // Set the step size for the ticks
                        },
                    },
                },
            },
        });

        function createRadialGradient(startColor, endColor) {
            const ctx = document.createElement('canvas').getContext('2d');
            const gradient = ctx.createRadialGradient(50, 50, 0, 50, 50, 50);
            gradient.addColorStop(0, startColor);
            gradient.addColorStop(1, endColor);
            return gradient;
        }

        



        const labels = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];

const data = {
  labels: labels,
  datasets: [
    {
      label: "Employee A",
      backgroundColor: "rgb(255, 99, 132)",
      borderColor: "rgb(255, 99, 132)",
      data: [0, 10, 5, 2, 20, 30, 17, 20, 22, 30, 28, 45]
    },
    {
      label: "label B",
      backgroundColor: "rgb(34,152,167)",
      borderColor: "rgb(34,152,167)",
      data: [0, 8, 15, 22, 10, 15, 18, 25, 26, 35, 37, 49]
    }
  ]
};

const config = {
  type: "line",
  data: data,
  options: {}
};

const myChart = new Chart(document.getElementById("hobbiesChart"), config);



        // Repeat for other charts, changing the variable and label as needed


        
    </script>
</body>
</html>
